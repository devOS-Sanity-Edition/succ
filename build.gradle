plugins {
	id "org.quiltmc.loom" version "0.12.+"
	id "io.github.juuxel.loom-quiltflower" version "1.+"
	id "maven-publish"
}
archivesBaseName = project.archives_base_name
group = project.maven_group

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"
version = project.version.replace("<build>", patch)

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://cursemaven.com" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://jitpack.io" }
}

dependencies {
	// dev environment
	minecraft("com.mojang:minecraft:$minecraft_version")
	mappings loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_build:v2"))
		it.officialMojangMappings { setNameSyntheticMembers(false) }
	}
	modImplementation("org.quiltmc:quilt-loader:$quilt_loader")
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:$quilted_fabric_api")

	// dev env
	modLocalRuntime("maven.modrinth:lazydfu:$lazydfu_version")
	modLocalRuntime("maven.modrinth:suggestion-tweaker:$suggestion_tweaker_version")
	modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
	modLocalRuntime("curse.maven:jade-324717:$jade_file")
	modLocalRuntime("com.terraformersmc:modmenu:$mod_menu_version")
	modLocalRuntime("dev.emi:emi:$emi_version")
}

task buildOrPublish {
	group = "build"
	String mavenUser = System.getenv().MAVEN_USER
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.getByName("publish"))
		println("prepared for publish")
	} else {
		dependsOn(tasks.getByName("build"))
		println("prepared for build")
	}
}

processResources {
	Map<String, String> properties = new HashMap<>()
	properties.put("version", version)
	properties.put("loader_version", quilt_loader)
	properties.put("qfapi_version", quilted_fabric_api)
	properties.put("minecraft_version", minecraft_version)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("quilt.mod.json") {
		expand properties
	}
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		compileClasspath += main.output
		runtimeClasspath += main.runtimeClasspath
		runtimeClasspath += main.output
	}
}

loom {
	runs {
		testmodClient {
			client()
			name "Testmod Client"
			source sourceSets.testmod
			runDir "run/test"
		}
		testmodServer {
			server()
			name "Testmod Server"
			source sourceSets.testmod
			runDir "run/test_server"
		}
		gametest {
			server()
			name "Test"
			source sourceSets.testmod
			vmArg "-Dfabric-api.gametest"
			vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "run/gametest_server"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
	withJavadocJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
			credentials {
				username = System.getenv().MAVEN_USER
				password = System.getenv().MAVEN_PASS
			}
			authentication { basic(BasicAuthentication) }
		}
	}
}
